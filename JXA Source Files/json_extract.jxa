#!/usr/bin/osascript -l JavaScript

//
// Created by Pico Mitchell (of Random Applications)
//
// MIT License
//
// Copyright (c) 2023 Pico Mitchell (Random Applications)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

// Version 2023.3.4-1

// NOTE: This code is identical to the code in "json_extract.sh" but with whitespace formatting.
// This code was written with the intention of being consolidated with all whitespace formatting removed,
// which is why a variety of decisions were made to make the code shorter rather than more readable.

// This script can be run directly, but it is recommended to instead run the code in the "json_extract.sh" script since it will display errors more nicely.
// Also, help/usage information is available within https://randomapplications.com/json_extract

"use strict"
// @ts-ignore: JXA-ObjC
ObjC.import("unistd")

var run = argv => {
	const args = []
	let p
	argv.forEach(a => {
		if (!p && /^-[^-]/.test(a)) {
			a = a.split("").slice(1)
			for (const i in a) {
				args.push("-" + a[i])
				if (/[ieE]/.test(a[i])) {
					((a.length > +i + 1) ? args.push(a.splice(+i + (a[+i + 1] === "=" ? 2 : 1)).join("")) : p = 1)
					break
				}
			}
		} else {
			args.push(a)
			p = 0
		}
	})

	let o, lA
	for (const i in args) {
		if (args[i] === "-i" && !/^-[eE]$/.test(lA)) {
			o = args.splice(+i, 2)[1]
			break
		}
		lA = args[i]
	}

	// @ts-ignore: JXA-ObjC
	const fH = $.NSFileHandle, hWS = "fileHandleWithStandard", rtS = "respondsToSelector"

	if (!o || o === "-") {
		const rdEOF = "readDataToEndOfFile", aRE = "AndReturnError"
		const h = fH[hWS + "Input"]
		// @ts-ignore: JXA-ObjC
		o = ($.isatty(0) ? "" : $.NSString.alloc.initWithDataEncoding(h[rtS](rdEOF + aRE + ":") ? h[rdEOF + aRE](ObjC.wrap()) : h[rdEOF], 4).js.replace(/\n$/, ""))
	}

	// @ts-ignore: JXA-ObjC
	if ($.NSFileManager.defaultManager.fileExistsAtPath(o)) o = $.NSString.stringWithContentsOfFileEncodingError(o, 4, ObjC.wrap()).js
	if (/[{[]/.test(o)) o = JSON.parse(o)

	let e, eE, oL, o0, oT, oTS

	const strOf = (O, N) => (typeof O === "object" ? JSON.stringify(O, null, N) : (O = O.toString(), (oT && (O = O.trim())), (oTS && (O = O.replace(/\s+/g, " "))), O)),
		ext = (O, K) => (Array.isArray(O) ? (/^-?\d+$/.test(K) ? (K = +K, O[K < 0 ? (O.length + K) : K]) : void 0) : (O instanceof Object ? O[K] : void 0)),
		ar = "array", dc = "dictionary", iv = "Invalid option", naV = "non-" + ar + " value"

	if (o || args.length) {
		args.forEach(a => {
			const isA = Array.isArray(o)
			if (e) {
				o = ext(o, a)
				if (o === void 0) throw (isA ? "Index" : "Key") + " not found in " + (isA ? ar : dc) + ": " + a
				e = 0
			} else if (eE) {
				o = o.map(E => (E = ext(E, a), (E === void 0 ? null : E)))
				eE = 0
			} else if (a === "-l") oL = 1
			else if (a === "-0") o0 = 1
			else if (a === "-t") oT = 1
			else if (a === "-T") oT = oTS = 1
			else {
				const isO = (o instanceof Object)
				if (isO && a === "-e") e = 1
				else if (isA && a === "-E") eE = 1
				else if (isA && a === "-N") o = o.filter(E => (E !== null))
				else if (isO && a === "-S") while (o instanceof Object && Object.keys(o).length === 1) o = o[Object.keys(o)[0]]
				else if (isA && a === "-f" && typeof o.flat === "function") o = o.flat(Infinity)
				else if (isA && a === "-s") o.sort((X, Y) => strOf(X).localeCompare(strOf(Y)))
				else if (isA && a === "-u") o = o.filter((E, I, A) => A.indexOf(E) === I)
				else if (isO && /^-[ckv]$/.test(a)) o = (a === "-c" ? Object.keys(o).length : (a === "-k" ? Object.keys(o) : Object.values(o)))
				else if (/^-[eSckv]$/.test(a)) throw iv + " for non-" + dc + " or " + naV + ": " + a
				else if (/^-[ENfsu]$/.test(a)) throw iv + " for " + naV + ": " + a
				else throw iv + ": " + a
			}
		})

		const d = (o0 ? "\0" : "\n")
		o = (((oL || o0) && Array.isArray(o)) ? o.map(E => strOf(E)).join(d) : strOf(o, 2)) + d
	}

	// @ts-ignore: JXA-ObjC
	o = ObjC.wrap(o).dataUsingEncoding(4)
	// @ts-ignore: JXA-ObjC
	const h = fH[hWS + "Output"], wD = "writeData";
	// @ts-ignore: JXA-ObjC
	(h[rtS](wD + ":error:") ? h[wD + "Error"](o, ObjC.wrap()) : h[wD](o))
}
