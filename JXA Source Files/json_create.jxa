#!/usr/bin/osascript -l JavaScript

//
// Created by Pico Mitchell (of Random Applications)
//
// MIT License
//
// Copyright (c) 2023 Pico Mitchell (Random Applications)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

// Version 2023.7.24-1

// NOTE: This code is identical to the code in "json_create.sh" but with whitespace formatting.
// This code was written with the intention of being consolidated with all whitespace formatting removed,
// which is why a variety of decisions were made to make the code shorter rather than more readable.

// This script can be run directly, but it is recommended to instead run the code in the "json_create.sh" script.
// Also, help/usage information is available within https://randomapplications.com/json_create

"use strict"
// @ts-ignore: JXA-ObjC
ObjC.import("unistd")

function run(argv) {
	// @ts-ignore: JXA-ObjC
	let stdin = $.NSFileHandle.fileHandleWithStandardInput, /** @type {object} */ out = [], dictOut = false, stdinJson = false, isValue = true, keyArg

	// @ts-ignore: JXA-ObjC
	if (!$.isatty(0)) {
		// @ts-ignore: JXA-ObjC
		stdin = $.NSString.alloc.initWithDataEncoding((stdin.respondsToSelector("readDataToEndOfFileAndReturnError:") ? stdin.readDataToEndOfFileAndReturnError(ObjC.wrap()) : stdin.readDataToEndOfFile), $.NSUTF8StringEncoding).js
		if (/^\s*[{[]/.test(stdin))
			try {
				out = JSON.parse(stdin)
				dictOut = !Array.isArray(out)
				stdinJson = true
			} catch (e) {}
	}

	if (argv[0] === "-d") {
		if (!stdinJson) {
			out = {}
			dictOut = true
		}

		if (dictOut) argv.shift()
		
	}

	argv.forEach((/** @type {any} */ arg, /** @type {number} */ index) => {
		if (dictOut) isValue = ((index % 2) !== 0)

		if (isValue)
			if (/^\s*[{[]/.test(arg))
				try { arg = JSON.parse(arg) } catch (e) {}
			else
				((/\d/.test(arg) && !isNaN(arg)) ? arg = +arg :
					((arg === "true") ? arg = true :
						((arg === "false") ? arg = false :
							((arg === "null") && (arg = null))
						)
					)
				);

		(dictOut ?
			(isValue ?
				out[keyArg] = arg :
				keyArg = arg
			) :
			out.push(arg)
		)
	})

	if (dictOut && !isValue && (keyArg !== void 0)) out[keyArg] = null

	return JSON.stringify(out, null, 2)
}
